-- Узнаем, когда была первая транзакция для каждого студента. Начиная с этой даты, мы будем собирать его баланс уроков. 
-- Создадим CTE first_payments с двумя полями: user_id и first_payment_date (дата первой успешной транзакции). 


with
first_payments as
(select
    user_id
    , min(transaction_datetime::date) as first_payment_date
from 
    payments
where 
    status_name = 'success'
group by 
    user_id
order by 1
)


-- Соберем таблицу с датами за каждый календарный день 2016 года. Выберем все даты из таблицы classes, создадим CTE all_dates с полем dt, где будут 
-- храниться уникальные даты (без времени) уроков. 


,
all_dates as
(select 
    distinct(class_start_datetime::date) as dt 
from
    classes
where
    date_part('year', class_start_datetime) = '2016'
)
    
    
-- Узнаем, за какие даты имеет смысл собирать баланс для каждого студента. Для этого объединим таблицы и создадим CTE `all_dates_by_user`,
-- где будут храниться все даты жизни студента после того, как произошла его первая транзакция. 
 
 
,   
all_dates_by_user as    
(select
    user_id
    , dt
from
    first_payments
join
    all_dates
    on all_dates.dt >= first_payments.first_payment_date          
order by 2
)


-- Найдем все изменения балансов, связанные с успешными транзакциями. Выберем все транзакции из таблицы payments, сгруппируем их по user_id и дате транзакции 
-- (без времени) и найдем сумму по полю classes. 
-- В результате получим CTE payments_by_dates с полями: user_id, payment_date, transaction_balance_change (сколько уроков было начислено или списано в этот
-- день).


,
payments_by_dates as
(select 
    user_id
    , transaction_datetime::date as payment_date 
    , sum(classes) as transaction_balance_change    
from
    payments
where
    status_name = 'success' -- успешные транзакции
group by 1, 2
order by 2
)


-- Найдем баланс студентов, который сформирован только транзакциями. Для этого объединим all_dates_by_user и payments_by_dates так,
-- чтобы совпадали даты и user_id. Используем оконные выражения (функцию sum), чтобы найти кумулятивную сумму по полю transaction_balance_change
-- для всех строк до текущей включительно с разбивкой по user_id и сортировкой по dt. 
-- В результате получим CTE payments_by_dates_cumsum с полями: user_id, dt, transaction_balance_change — transaction_balance_change_cs
-- (кумулятивная сумма по transaction_balance_change). При подсчете кумулятивной суммы можно заменить пустые значения нулями.


,
payments_by_dates_cumsum as
(select  
    all_dates_by_user.user_id
    , dt
    , case when transaction_balance_change is null then 0 else transaction_balance_change end as transaction_balance_change
    , sum(transaction_balance_change) over (partition by all_dates_by_user.user_id order by dt rows between unbounded preceding and current row)
    as transaction_balance_change_cs
from
    all_dates_by_user
left join
    payments_by_dates
    on payments_by_dates.user_id = all_dates_by_user.user_id
    and payments_by_dates.payment_date = all_dates_by_user.dt
)


-- Найдем изменения балансов из-за прохождения уроков. 
-- Создадим CTE classes_by_dates, посчитав в таблице classes количество уроков за каждый день для каждого ученика. 
-- Нас не интересуют вводные уроки и уроки со статусом, отличным от success и failed_by_student. 
-- Получим результат с такими полями: user_id, class_date, classes (количество пройденных в этот день уроков). Причем classes мы умножим на -1, 
-- чтобы отразить, что - — это списания с баланса.


,
classes_by_dates as
(select
    user_id
    , class_start_datetime::date as class_date
    , count(id_class)*(-1) as classes
from
    classes
where
    class_type != 'trial'
    and class_status in ('success', 'failed_by_student')
group by user_id, class_start_datetime
order by 1, 2
)


-- По аналогии с уже проделанным шагом для оплат создадим CTE для хранения кумулятивной суммы количества пройденных уроков. 
-- Для этого объединим таблицы all_dates_by_user и classes_by_dates так, чтобы совпадали даты и user_id. Используем оконные выражения (функцию sum),
-- чтобы найти кумулятивную сумму по полю classes для всех строк до текущей включительно с разбивкой по user_id и сортировкой по dt. 
-- В результате получим CTE classes_by_dates_dates_cumsumс полями: user_id, dt, classes — classes_cs(кумулятивная сумма по classes).
-- При подсчете кумулятивной суммы обязательно нужно заменить пустые значения нулями.


,
classes_by_dates_dates_cumsum as
(select                               
    all_dates_by_user.user_id
    , dt
    , case when classes_by_dates.classes is null then 0 else classes_by_dates.classes end as classes
    , sum(coalesce(classes_by_dates.classes, 0)) over (partition by all_dates_by_user.user_id order by dt rows between unbounded preceding and current row)
    as classes_cs
from
    all_dates_by_user
left join
    classes_by_dates
    on classes_by_dates.user_id = all_dates_by_user.user_id
    and classes_by_dates.class_date = all_dates_by_user.dt
)

-- Создадим CTE `balances` с вычисленными балансами каждого студента. Для этого объединим таблицы `payments_by_dates_cumsum` и
-- `classes_by_dates_dates_cumsum` так, чтобы совпадали даты и `user_id`.
-- **Получим такие поля:** `user_id`, `dt`, `transaction_balance_change`, `transaction_balance_change_cs`, `classes`, `classes_cs`,
-- `balance` (`classes_cs` + `transaction_balance_change_cs`).    


,
balances as
(select
    classes_by_dates_dates_cumsum.user_id
    , classes_by_dates_dates_cumsum.dt
    , transaction_balance_change
    , transaction_balance_change_cs
    , classes
    , classes_cs
    , classes_cs + transaction_balance_change_cs as balance
from
    payments_by_dates_cumsum
join
    classes_by_dates_dates_cumsum
    on payments_by_dates_cumsum.user_id = classes_by_dates_dates_cumsum.user_id
    and payments_by_dates_cumsum.dt = classes_by_dates_dates_cumsum.dt
order by 1, 2
)


-- Посмотрим, как менялось общее количество уроков на балансах студентов.
-- Для этого просуммируем поля `transaction_balance_change`, `transaction_balance_change_cs`, `classes`, `classes_cs`, `balance` из CTE `balances`
-- с группировкой и сортировкой по `dt`.

select 					
     balances.dt                                          					
     , sum(transaction_balance_change) as transaction_balance_change					
     , sum(transaction_balance_change_cs) as transaction_balance_change_cs					
     , sum(classes) as classes					
     , sum(classes_cs) as classes_cs 					
     , sum(balance) as balance 					
from balances					
group by 1					
order by  1					
